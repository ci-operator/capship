---
apiVersion: template.openshift.io/v1
kind: Template
labels:
  app: "${RUNNER_NAME}"
  template: redrunner
message: RedRunner is deployed
metadata:
  annotations:
    description: |-
      RedRunner - A minimalist API for distributable, in-cluster microservice O&M via ansible playbooks
    iconClass: icon-openshift
    openshift.io/display-name: RedRunner
    openshift.io/documentation-url: https://gitlab.engineering.redhat.com/ccit/redrunner/raw/master/README.md
    openshift.io/long-description: This template deploys RedRunner
    openshift.io/provider-display-name: Red Hat, Inc.
    openshift.io/support-url: https://access.redhat.com
    tags: redrunner,backup,recovery,admin,ops,ansible,ansible-runner,runner
  name: redrunner

objects:
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    name: "${RUNNER_NAME}"
    namespace: "${NAMESPACE}"
  spec:
    updateStrategy:
      type: RollingUpdate
    podManagementPolicy: Parallel
    selector:
      matchLabels:
        app: "${RUNNER_NAME}"
    template:
      metadata:
        labels:
          app: "${RUNNER_NAME}"
        name: "${RUNNER_NAME}"
      spec:
        serviceAccountName: "${RUNNER_NAME}"
        containers:
        - name: runner
          args:
          - /bin/sh
          - -c
          - ${RUNNER_EXEC}
          image: ${RUNNER_IMAGE}:${RUNNER_TAG}
          imagePullPolicy: Always
          env:
          - name: RP_HOST
            value: ${HOST_NAME}.${DOMAIN}
          - name: RUNNER_VERBOSITY
            value: INFO
          - name: RUNNER_DB
            value: "${RUNNER_DB}"
          - name: TINI_SUBREAPER
            value: 'true'
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          ports:
          - containerPort: 9011
            protocol: TCP
          resources:
            requests:
              cpu: 200m
              memory: 512Mi
            limits:
              cpu: 1000m
              memory: ${RUNNER_RAM}
          volumeMounts:
          - mountPath: /ansible/requirements.yml
            subPath: requirements.yml
            name: galaxy-requirements
          # - mountPath: /ansible/kustom-${RUNNER_KUSTOMIZE_CM}
          #   name: kustomization
          - mountPath: /runner/.ansible
            name: runner-tmp
          - mountPath: /.ansible
            name: ansible-tmp
          - mountPath: /runner/.kube
            name: runner-kubeconfig
          - mountPath: /runner/.config
            name: runner-helmconfig
          - mountPath: /runner/.cache
            name: runner-helmcache
          - mountPath: /runner/components/env/extravars
            subPath: extravars
            name: extravars
          - mountPath: /runner/.gitconfig
            subPath: .gitconfig
            name: gitconfig
          - mountPath: /runner/.ssh/known_hosts
            subPath: known_hosts
            name: known-hosts
          - mountPath: /runner/.ssh/id_rsa
            subPath: id_rsa
            name: deploy-key
          - mountPath: /runner/token
            subPath: token
            name: k8s-token
          - mountPath: /.kube
            name: kubeconfig
          - mountPath: /runner/data
            name: runner-data
          - mountPath: /runner/components/project
            name: components
          - mountPath: /runner/components/inventory/hosts
            subPath: hosts
            name: inventory
          - mountPath: /runner/components/artifacts
            name: runner-artifacts
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: runner-data
          persistentVolumeClaim:
            claimName: "${RUNNER_PVC}"
        - name: components
          configMap:
            name: "${RUNNER_PLAYBOOKS_CM}"
        - name: inventory
          configMap:
            name: "${RUNNER_HOSTS_CM}"
        # - name: kustomization
        #   configMap:
        #     name: "${RUNNER_KUSTOMIZE_CM}"
        - name: runner-artifacts
          emptyDir: {}
        - name: ansible-tmp
          emptyDir:
            medium: Memory
        - name: runner-tmp
          emptyDir:
            medium: Memory
        - name: kubeconfig
          emptyDir:
            medium: Memory
        - name: galaxy-requirements
          configMap:
            name: "${RUNNER_REQS_CM}"
            items:
            - key: requirements.yml
              path: requirements.yml
        - name: runner-kubeconfig
          emptyDir:
            medium: Memory
        - name: runner-helmconfig
          emptyDir:
            medium: Memory
        - name: runner-helmcache
          emptyDir:
            medium: Memory
        - name: extravars
          configMap:
            name: "${RUNNER_EXTRAVARS}"
            items:
            - key: extravars
              path: extravars
        - name: gitconfig
          configMap:
            name: "${RUNNER_GITCONFIG}"
            items:
            - key: gitconfig
              path: .gitconfig
        - name: known-hosts
          configMap:
            name: "${KNOWN_HOSTS}"
            items:
            - key: known_hosts
              path: known_hosts
        - name: deploy-key
          secret:
            secretName: "${DEPLOY_KEY}"
            items:
            - key: id_rsa
              path: id_rsa
        - name: k8s-token
          secret:
            secretName: "${TOKEN_NAME}"
            items:
            - key: "${TOKEN_NAME}"
              path: token

- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: "${RUNNER_NAME}"
    name: "${RUNNER_NAME}"
  spec:
    ports:
    - name: 9011-tcp
      port: 9011
      protocol: TCP
      targetPort: 9011
    selector:
      app: "${RUNNER_NAME}"
    sessionAffinity: None
    type: ClusterIP

- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    labels:
      app: "${RUNNER_NAME}"
    name: "${RUNNER_NAME}"
  spec:
    host: ${HOST_NAME}-${RUNNER_NAME}.${DOMAIN}
    port:
      targetPort: 9011-tcp
    tls:
      termination: edge
      insecureEdgeTerminationPolicy: Redirect
    to:
      kind: Service
      name: "${RUNNER_NAME}"
      weight: 100
    wildcardPolicy: None

- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: "${RUNNER_NAME}"
    namespace: "${NAMESPACE}"

- apiVersion: authorization.openshift.io/v1
  kind: RoleBinding
  metadata:
    name: "${RUNNER_NAME}"
  roleRef:
    name: admin
  subjects:
  - kind: ServiceAccount
    name: "${RUNNER_NAME}"
    namespace: "${NAMESPACE}"

parameters:
- description: Project Namespace
  displayName: Runner Project Namespace
  name: NAMESPACE
  required: true
- description: Project Hostname Base
  displayName: Runner Project Host Name Base
  name: HOST_NAME
  required: true
- description: Project hostname domain
  displayName: Domain
  name: DOMAIN
  required: true
- description: Runner Name
  displayName: Unique name among Runner instances in one project
  name: RUNNER_NAME
  value: runner
  required: true
- description: Runner Port
  displayName: Runner Port
  name: RUNNER_PORT
  value: "9011"
  required: true
- description: Runner Image Stream
  displayName: Runner Image Registry Repository
  name: RUNNER_IMAGE
  value: "docker-registry.upshift.redhat.com/ccit/runner"
  required: true
- description: Runner Image Tag
  displayName: Runner Image Tag
  name: RUNNER_TAG
  required: true
- description: Runner PVC Name
  displayName: Runner PersistentVolumeClaim Name
  name: RUNNER_PVC
  value: "runner-data"
  required: true
- description: Runner Components ConfigMap Name
  displayName: Mounted configmap containing ansible playbooks
  name: RUNNER_PLAYBOOKS_CM
  value: "recovery-components"
  required: true
- description: Runner requirements ConfigMap Name
  displayName: Mounted configmap containing Ansible Galaxy requirements.yml
  name: RUNNER_REQS_CM
  value: "runner-roles"
  required: true
- description: Runner inventory ConfigMap Name
  displayName: Mounted configmap containing Ansible hosts
  name: RUNNER_HOSTS_CM
  value: "runner-hosts"
  required: true
- description: Runner database location
  displayName: Writable file path for Runner Database
  name: RUNNER_DB
  value: "/runner/data/runner.db"
  required: true
- description: Runner RAM limit
  displayName: Resource limit for memory
  name: RUNNER_RAM
  value: "1Gi"
  required: true
- description: Runner executable
  displayName: Command to execute in subreaped shell upon initialization
  name: RUNNER_EXEC
  value: /runner/runner
  required: true
- description: Runner Git Config
  displayName: Runner Git Configuration configmap as .gitconfig
  name: RUNNER_GITCONFIG
  value: gitconfig
  required: true
# - description: Runner Kustomize Config
#   displayName: Runner kustomize configuration configmap directory
#   name: RUNNER_KUSTOMIZE_CM
#   required: true
- description: Runner extravars configmap
  displayName: Ansible-runner extravars yaml configmap name
  name: RUNNER_EXTRAVARS
  value: extravars
  required: true
- description: Runner Known Hosts
  displayName: Trusted hosts (.ssh/known-hosts) for git-ls operations
  name: KNOWN_HOSTS
  value: known-hosts
  required: true
- description: Runner SSH Identity secret
  displayName: Secret containing id_rsa secret for SSH identity
  name: DEPLOY_KEY
  value: deploy-key
  required: true
- description: Runner foreign k8s token secret name (for migration from another cluster)
  displayName: Secret key/name containing k8s login token
  name: TOKEN_NAME
  required: true
